name: 🔒 Security Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security checks weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: 🔍 Dependency Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run security audit
        run: |
          echo "🔍 Running pnpm audit..."
          pnpm audit --audit-level moderate

      - name: 📊 Check for known vulnerabilities
        run: |
          echo "📊 Checking for known vulnerabilities..."
          npx audit-ci --moderate

  # CodeQL analysis for code security
  codeql-analysis:
    name: 🔬 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: ['javascript']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build project
        run: pnpm run build

      - name: 🔬 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # License compliance check
  license-check:
    name: ⚖️ License Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ⚖️ Check licenses
        run: |
          echo "⚖️ Installing license checker..."
          npx license-checker --summary --excludePrivatePackages

          echo "📋 Checking for problematic licenses..."
          npx license-checker --failOn "GPL;AGPL;LGPL;CPAL;OSL;EPL;MPL" --excludePrivatePackages

  # Bundle size check to prevent supply chain attacks
  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build library
        run: pnpm run build

      - name: 📊 Analyze bundle size
        run: |
          echo "📦 Bundle size analysis:"
          ls -lah dist/

          # Check if bundle sizes are reasonable
          for file in dist/*.js; do
            if [[ -f "$file" ]]; then
              SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
              echo "📏 $file: $SIZE bytes"

              # Warn if any file is over 100KB (reasonable for a React hook library)
              if [[ $SIZE -gt 102400 ]]; then
                echo "⚠️ Warning: $file is larger than 100KB ($SIZE bytes)"
                echo "This might indicate a supply chain issue or bundling problem"
              fi
            fi
          done

      - name: 🔍 Check for suspicious patterns
        run: |
          echo "🔍 Scanning for suspicious patterns in built files..."

          # Check for common suspicious patterns
          SUSPICIOUS_PATTERNS=(
            "eval\("
            "Function\("
            "XMLHttpRequest"
            "fetch\("
            "\.send\("
            "btoa\("
            "atob\("
            "crypto\."
            "require\(['\"]child_process['\"]"
            "require\(['\"]fs['\"]"
            "require\(['\"]http['\"]"
            "require\(['\"]https['\"]"
          )

          for pattern in "${SUSPICIOUS_PATTERNS[@]}"; do
            if grep -r "$pattern" dist/ 2>/dev/null; then
              echo "⚠️ Suspicious pattern found: $pattern"
              echo "This should be investigated for potential security issues"
            fi
          done

          echo "✅ Bundle security check complete"

  # Collect security results
  security-complete:
    name: ✅ Security Checks Complete
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, license-check, bundle-analysis]
    if: always()

    steps:
      - name: 📊 Security summary
        run: |
          echo "🔒 Security check results:"
          echo "🔍 Dependency scan: ${{ needs.dependency-scan.result }}"
          echo "🔬 CodeQL analysis: ${{ needs.codeql-analysis.result }}"
          echo "⚖️ License check: ${{ needs.license-check.result }}"
          echo "📦 Bundle analysis: ${{ needs.bundle-analysis.result }}"

          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || [[ "${{ needs.codeql-analysis.result }}" == "failure" ]] || [[ "${{ needs.license-check.result }}" == "failure" ]] || [[ "${{ needs.bundle-analysis.result }}" == "failure" ]]; then
            echo "❌ Some security checks failed!"
            exit 1
          else
            echo "✅ All security checks passed! 🔒"
          fi
