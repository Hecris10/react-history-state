name: 🔍 Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress runs for the same PR
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Skip checks for draft PRs unless explicitly requested
  check-skip:
    name: Check if CI should run
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip.outputs.should-skip }}
    steps:
      - name: Check if PR is draft
        id: skip
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping CI for draft PR"
          else
            echo "should-skip=false" >> $GITHUB_OUTPUT
            echo "✅ Running CI for ready PR"
          fi

  # Quality checks and testing
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should-skip == 'false'

    strategy:
      matrix:
        node-version: [18, 20, 21]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run linting
        run: pnpm run lint

      - name: 🔧 Run type checking
        run: pnpm run type-check

      - name: 🧪 Run tests with coverage
        run: pnpm run test:coverage

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == 20 # Only upload once
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 🏗️ Test build
        run: pnpm run build

      - name: 📦 Test package contents
        run: |
          echo "📋 Checking built files..."
          ls -la dist/
          echo "✅ Build files:"
          find dist/ -type f -name "*.js" -o -name "*.d.ts" | head -10

  # Build verification across multiple environments
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ${{ matrix.os }}
    needs: check-skip
    if: needs.check-skip.outputs.should-skip == 'false'

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build library
        run: pnpm run build

      - name: ✅ Verify exports
        run: |
          node -e "
            const lib = require('./dist/index.js');
            console.log('✅ CommonJS exports:', Object.keys(lib));
            if (!lib.useHistoryState) throw new Error('❌ useHistoryState not exported');
            if (!lib.createHistoryManager) throw new Error('❌ createHistoryManager not exported');
            console.log('🎉 All exports verified!');
          "

  # Security and dependency checks
  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.should-skip == 'false'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run security audit
        run: pnpm audit

      - name: 📊 Check bundle size
        run: |
          echo "📦 Checking bundle sizes..."
          pnpm run build
          ls -lah dist/
          echo "📊 Bundle analysis:"
          du -sh dist/*

  # Collect results
  pr-checks-complete:
    name: ✅ All PR Checks Complete
    runs-on: ubuntu-latest
    needs: [test, build-verification, security]
    if: always() && needs.check-skip.outputs.should-skip == 'false'

    steps:
      - name: 📊 Check all jobs status
        run: |
          echo "🔍 Test job: ${{ needs.test.result }}"
          echo "🏗️  Build job: ${{ needs.build-verification.result }}"
          echo "🔒 Security job: ${{ needs.security.result }}"

          if [[ "${{ needs.test.result }}" == "failure" ]] || [[ "${{ needs.build-verification.result }}" == "failure" ]] || [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ Some checks failed!"
            exit 1
          else
            echo "✅ All PR checks passed! Ready for review 🎉"
          fi
